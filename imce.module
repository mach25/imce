<?php
// $Id$

/**
 * Implementation of hook_footer().
 */
function imce_footer() {
  if (user_access('access imce')) {
    $header = drupal_set_html_head();
    if (variable_get('imce_settings_tinymce', 1) && strpos($header, 'tinyMCE.init')) {//set imce if tinymce is in action
      $output .= '<script type="text/javascript" src="'. base_path() . drupal_get_path('module', 'imce') .'/imce_set_tinymce.js' .'"></script>';
    }
    if (variable_get('imce_settings_fck', 0) && strpos($header, 'fckeditor.js')) {//set imce if fckeditor is in action
      $output .= '<script type="text/javascript" src="'. base_path() . drupal_get_path('module', 'imce') .'/imce_set_fck.js' .'"></script>';
    }
    return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function imce_perm() {
  return array('access imce', 'administer imce');
}

/**
 * Implementation of hook_menu().
 */
function imce_menu($may_cache) {
  global $user;
  $GLOBALS['imce_ext'] = array('.gif', '.jpg', '.jpeg', '.png');
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'imce/browse',
      'title' => 'imce browse',
      'access' => user_access('access imce'),
      'callback' => 'imce_browse',
      'type' => MENU_CALLBACK,
    );
    $items[] = array('path' => 'admin/settings/imce',
      'title' => 'IMCE settings',
      'description' => t('Control how your image/file browser works.'),
      'access' => user_access('administer imce'),
      'callback' => 'imce_form_admin',
    );
  }
  elseif (arg(0)=='user' && ($uid=arg(1)) && is_numeric($uid)) {
    if ($user->uid == $uid) {
      $access = user_access('access imce');
      $acc = $user;
    }
    elseif (user_access('administer imce') && $uid!=1 && $acc=user_load(array('uid'=>$uid))) {
      $access = array_intersect(user_roles(0, 'access imce'), $acc->roles);
    }
    if ($access) {
      $items[] = array('path' => 'user/'.$uid.'/imce',
        'title' => t('IMCE files'),
        'access' => TRUE,
        'callback' => 'imce_user_page',
        'callback arguments' => array($acc),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
      );
    }
  }
  elseif (arg(0)=='imce' && arg(1) != 'browse' && user_access('access imce')) {
    if (drupal_valid_token($_REQUEST['token'], 'imce')) {
      $set = (object) imce_settings_user();
      if (arg(1)=='delete' && $set->delete && ($filename=basename(arg(2)))) {
        imce_delete_file($set, $filename);
      }
      elseif (arg(1)=='upload' && $set->upload && $_FILES['thefile']) {
        imce_copy_uploaded($set, $_FILES['thefile']);
      }
      elseif (arg(1)=='resize' && $set->resize && ($filename=basename($_POST['img_name']))) {
        imce_resize_image($set, $filename, $_POST['img_w'], $_POST['img_h'], $_POST['img_copy']);
      }
    }
    elseif (arg(1)=='login' && user_access('administer imce') && ($uid=arg(2)) && $uid!=1 && $user->uid!=$uid && ($acc=user_load(array('uid' => $uid))) && array_intersect(user_roles(0, 'access imce'), $acc->roles)) {
      $_SESSION['imceuser'] = array('uid'=>$acc->uid, 'roles'=>$acc->roles, 'name'=>$acc->name, 'ownperm' =>arg(3)=='own');
    }
    elseif (arg(1)=='logout' && user_access('administer imce')) {
      unset($_SESSION['imceuser']);
    }
    drupal_goto('imce/browse');
  }
  return $items;
}

/**
 * Image Browser.
 */
function imce_browse() {
  $set = (object) imce_settings_user();
  $private = variable_get('file_downloads', '')==FILE_DOWNLOADS_PRIVATE;
  $syspath = file_directory_path();
  $basepath = base_path();
  $imcepath = $basepath. drupal_get_path('module', 'imce');
  $header = array(array('data'=>t('filename'), 'class'=>'filename'), array('data'=>t('size'), 'class'=>'size'), array('data'=>t('dimensions'), 'class'=>'dimensions'), array('data'=>t('date'), 'class'=>'date'), array('data'=>t('operations'), 'class'=>'operations'));
  $token = drupal_get_token('imce');

  //file list
  $files = imce_scan_directory($set->dir);
  //prevent quota theft by multiple sessions.
  if ($_SESSION['imcelatest'] && $files['size']>$set->quota*1024 && !$set->nolimit) {
    $files['size'] -= filesize($_SESSION['imcelatest']);
    @unlink($_SESSION['imcelatest']);
    unset($files['list'][$_SESSION['imcelatest']], $_SESSION['imcelatest']);
    drupal_set_message(t('File was deleted due to quota exceed!'), 'error');
  }
  foreach ($files['list'] as $path=>$file) {
    $rows[] = array(array('data' => $file['f'], 'class' => 'filename'),
      array('data' => format_size($file['s']), 'class' => 'size', 'id' => $file['s']),
      array('data' => $file['w'].'x'.$file['h'], 'class' => 'dimensions'),
      array('data' => date('Y-m-d', $file['d']), 'class' => 'date', 'id' => $file['d'], 'title' => date('H:i:s', $file['d'])),
      array('data' => $set->delete ? l(t('delete'), 'imce/delete/'.$file['f'], NULL, 'token='.$token) : '', 'class' => 'operations'),
    );
  }
  if (!isset($rows)) {
    $rows = array(array('<div class="messages">'.t('Directory is empty.').'</div>'));
  }
  $_SESSION['imcetotal'] = $files['size'];

  //upload form
  if ($set->upload) {
    $uploadform = '<form action="'.url('imce/upload').'" method="post" id="uploadform" enctype="multipart/form-data">
  <input type="file" name="thefile" id="thefile" size="30">
  <input type="hidden" name="token" value="'. $token .'">
  <input type="submit" name="submit" value="'.t('Upload File').'">'.
  ($set->nolimit ? '<input type="checkbox" checked="checked" name="scale">'.t('Scale if necessary') : ($set->scale ? '<input type="hidden" value="1" name="scale">' : '')).
  ($set->twidth&&$set->theight ? '<input type="checkbox" name="thumb">'.t('Create thumbnail').' ('. $set->twidth .'x'. $set->theight .')' : '').'
</form>
<div class="limits">'.  ($set->nolimit ? t('Dimensions for scaling') .' = <strong>'. $set->width .'x'. $set->height .'</strong>, '. t('Quota') .' = <strong>'. format_size($_SESSION['imcetotal']).'</strong>/'.t('Unlimited') : '<strong>'. t('Limits') .'</strong>: '. t('File size') .' = <strong>'. $set->filesize .' KB</strong>, '. t('Dimensions') .' = <strong>'. $set->width .'x'. $set->height .'</strong>, '. t('Quota') .' = <strong>'. format_size($_SESSION['imcetotal']) .'</strong>/'. $set->quota .' KB').'</div>';
  }
  //resize form
  if ($set->resize) {
    $resizeform = '<form action="'.url('imce/resize').'" method="post" id="resizeform">
  <input type="submit" name="submit" value="'.t('Resize image').'">
  <input type="hidden" name="token" value="'. $token .'">
  <span id="resize-file-span">'.t('filename').':<input type="text" name="img_name" id="img_name" size="12">
  '.t('dimensions').':</span><input type="text" name="img_w" id="img_w" size="2">x<input type="text" name="img_h" id="img_h" size="2">
  <input type="checkbox" name="img_copy">'.t('Create a copy').'
</form>';
  }

  $output = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>'.t('Image Browser').'</title>
  <script type="text/javascript" src="'. $basepath .'misc/jquery.js"></script>
  <script type="text/javascript" src="'. $imcepath .'/imce_browse.js"></script>'.
  ($set->extras ? '<script type="text/javascript" src="'. $imcepath .'/imce_extras.js"></script>' : '').'
  <style type="text/css" media="all">@import "'. $imcepath .'/imce.css";</style>
</head>
<body>
<div id="headerdiv">'.
theme('table', $header, array(), array('id'=>'headertable')).'
</div>
<div id="bodydiv" title="'.($set->extras ? t('Keyboard shortcuts').': '.t('UP(previous), DOWN(next), DELETE, INSERT(add)') : '').'">'.
theme('table', array(), $rows, array('id'=>'bodytable')).'
</div>
<div id="resize-bar">
  <div id="resize-bar-in">^</div>
  <div id="info-div">'.t('Directory').': '.$set->dir.'<br />'. ($_SESSION['imceuser'] ? t('User').': '.$_SESSION['imceuser']['name'].' - '.l(t('logout'), 'imce/logout') : '') .'</div>
</div>
<div id="imagepreview">'.theme('status_messages').'</div>
<div class="forms">'.
$uploadform .
$resizeform .'
</div>
<script type="text/javascript">
  var imceVar = [];
  imceVar["fileUrl"] = "'. ($private ? url('system/files/').trim(substr($set->dir, strlen($syspath)), '\\/') : $basepath.$set->dir) .'";
  imceVar["latestFile"] = "'. ($_SESSION['imcelatest'] ? ($private ? url('system/files/'). trim(substr($_SESSION['imcelatest'], strlen($syspath)), '\\/') : $basepath.$_SESSION['imcelatest']) : '') .'";
  imceVar["confirmDel"] = "'. ($set->delete ? t('Are you sure want to delete this file?') : '') .'";
  imceVar["addText"] = "'.t('add').'";'.
($set->extras ? ' imceVar["filterText"] = ["'.t('Display'). '", "'. t('all'). '", "'. t('images'). '", "'. t('non-images').'"];' : '') .'
</script>
</body>
</html>';
  unset($_SESSION['imcelatest']);
  print $output;
  exit();
}

/**
 * copy uploaded file to the specified directory.
 */ 
function imce_copy_uploaded($set, $file) {
  //is the file real
  if (!is_uploaded_file($file['tmp_name']) || !isset($_SESSION['imcetotal'])) {
    drupal_set_message(t('No files were uploaded.'), 'error');
    return FALSE;
  }

  //move uploaded file to drupal's temp directory
  $temp = tempnam(file_directory_temp(), 'tmp_');
  if (!move_uploaded_file($file['tmp_name'], $temp)) {
    drupal_set_message(t('File upload error. Could not move uploaded file.'));
    return FALSE;
  }
  $file['tmp_name'] = $temp;

  //dont like too long filenames and files without an extension.
  $file['name'] = trim(basename($file['name']), '.');
  $file['name'] = substr($file['name'], -48); //max filename lenght is 48
  if (!($dot = strrpos($file['name'], '.'))) {
    drupal_set_message(t('Invalid filename.'), 'error');
    return FALSE;
  }
  $extension = strtolower(substr($file['name'], $dot));

  //check image type and dimensions.
  if (in_array($extension, $GLOBALS['imce_ext']) && ($info = @getimagesize($file['tmp_name']))) {
    if (!in_array($info[2], array(1, 2, 3))) {// 1=gif, 2=jpg, 3=png. real file types
      drupal_set_message(t('Only images with .jpg, .gif, and .png extensions are allowed.'), 'error');
      return FALSE;
    }
    if ($info[0]>$set->width || $info[1]>$set->height) {
      if (($set->scale||$set->nolimit) && $_POST['scale']) {
        if(!image_scale($file['tmp_name'], $file['tmp_name'], $set->width, $set->height)) {
          drupal_set_message(t('Error scaling image.'), 'error');
          return FALSE;
        }
        clearstatcache();
        $file['size'] = filesize($file['tmp_name']);//new size
        $info = @getimagesize($file['tmp_name']);
        drupal_set_message(t('Image was scaled to allowed dimensions.'));
      }
      else if (!$set->nolimit) {
        drupal_set_message(t('Image dimensions exceed the limit.'), 'error');
        return FALSE;
      }
    }
  }
  // file is not an image. check if the extension is allowed
  else if ($set->extensions) {
    if (!in_array($extension, explode(',', str_replace(' ', '', $set->extensions)))) {
      drupal_set_message(t('Invalid file extension. Allowed extensions are .jpg, .gif, .png, !ext', array('!ext' => $set->extensions)), 'error');
      return FALSE;
    }
  }
  else if ($set->uid!=1) {//no limitation for user1 regarding non-image files.
    drupal_set_message(t('Only images with .jpg, .gif, and .png extensions are allowed.'), 'error');
    return FALSE;
  }

  //check quota, filesize.
  if ($file['size'] > $set->filesize*1024 && !$set->nolimit) {
    drupal_set_message(t('File size exceeds upload limit.'), 'error');
    return FALSE;
  }
  $newtotal = $file['size'] + $_SESSION['imcetotal'];
  if ($newtotal > $set->quota*1024 && !$set->nolimit) {
    drupal_set_message(t('You dont have enough free space.'), 'error');
    return FALSE;
  }

  //clear filename and copy file
  $cleared = preg_replace("/[^\w\-\_]/", '_', substr($file['name'], 0, $dot)).$extension;
  $newpath = file_create_filename($cleared, $set->dir);
  if (!@copy($file['tmp_name'], $newpath)) {
    drupal_set_message(t('Error copying the file.'), 'error');
    return FALSE;
  }

  //success
  @chmod($newpath, 0664);
  $_SESSION['imcetotal'] = $newtotal;
  $_SESSION['imcelatest'] = $newpath;
  drupal_set_message(t('Upload successful.'));

  //thumbnails
  if ($_POST['thumb'] && $info && $set->twidth && $set->theight && ($set->twidth<$info[0] || $set->theight<$info[1])) {
    $aspect = $info[1] / $info[0];
    if ($aspect < $set->theight / $set->twidth) {
      $w = (int)min($set->twidth, $info[0]);
      $h = (int)round($w * $aspect);
    }
    else {
      $h = (int)min($set->theight, $info[1]);
      $w = (int)round($h / $aspect);
    }
    if (imce_resize_image($set, basename($newpath), $w, $h, TRUE)) {
      drupal_set_message(t('Thumbnail created.'));
    }
    else {
      drupal_set_message(t('Thumbnail can not be created.'), 'error');
    }
  }
  return TRUE;
}

/**
 * delete a file
 */
function imce_delete_file($set, $filename) {
  if (file_delete($set->dir.'/'.$filename)) {
    drupal_set_message(t('File deleted successfully.'));
    return TRUE;
  }
  drupal_set_message(t('Error deleting file.'), 'error');
  return FALSE;
}

/**
  * Resize file:$file in directory:$dir to dimensions $w x $h
  */
function imce_resize_image($set, $filename, $w, $h, $copy=FALSE) {
  //check if file exists
  $path = $set->dir.'/'.$filename;
  if (!is_file($path)) {
    drupal_set_message(t('File does not exist.'), 'error');
    return FALSE;
  }
  $_SESSION['imcelatest'] = $path;

  // check resize dimensions and file type
  if (!($dot = strrpos($filename, '.')) || !in_array(strtolower(substr($filename, $dot)), $GLOBALS['imce_ext'])) {
    drupal_set_message(t('File type is not supported.'), 'error');
    return FALSE;
  }
  if (!($w>0 && $h>0) || (($w>$set->width || $h>$set->height) && !$set->nolimit)) {
    drupal_set_message(t('Image dimensions exceed the limit.'), 'error');
    return FALSE;
  }

  //resize image to a temp file
  $temp = tempnam(file_directory_temp(), 'tmp_');
  if(!image_resize($path, $temp, $w, $h)) {
    drupal_set_message(t('Error resizing image.'), 'error');
    return FALSE;
  }

  //check quota
  $newtotal = $_SESSION['imcetotal'] + ($copy ? @filesize($temp) : @filesize($temp)-@filesize($path));
  if ($newtotal > $set->quota*1024 && !$set->nolimit) {
    drupal_set_message(t('You dont have enough free space.'), 'error');
    return FALSE;
  }

  //copy file
  $newpath = $copy ? file_create_filename($filename, $set->dir) : $path;
  if (!@copy($temp, $newpath)) {
    drupal_set_message(t('Error copying the file.'), 'error');
    return FALSE;
  }

  //success
  @chmod($newpath, 0664);
  $_SESSION['imcetotal'] = $newtotal;
  $_SESSION['imcelatest'] = $newpath;
  drupal_set_message(t('Resizing successful.'));
  return TRUE;
}

/**
 * scan directory and return file list and total size of dir.
 */
function imce_scan_directory($dir) {
  if (!is_dir($dir) || !is_readable($dir) || !($handle = @opendir($dir))) {
    drupal_set_message(t('Error opening directory'), 'error');
    return FALSE;
  }
  $files = array();
  $totalsize = 0;
  while(($file = @readdir($handle)) !== FALSE) {
    if ($file == '.' || $file == '..' || $file == 'CVS' || $file == '.svn') continue;
    $path = $dir.'/'.$file;
    $size = @filesize($path);
    $ext = strtolower(substr($file, strrpos($file, '.')));
    $img = in_array($ext, $GLOBALS['imce_ext']) ? @getimagesize($path) : array(0, 0);
    $date = @filemtime($path);
    $files[$path] = array('f'=>$file, 's'=>$size, 'w'=>(int)$img[0], 'h'=>(int)$img[1], 'd'=>$date);
    $totalsize += $size;
  }
  return array('list'=>$files, 'size'=>$totalsize);
}

/**
 * return working image directory.
 */
function imce_get_directory($set) {
  if ($set['shared']) {//use shared folder if it is declared
    $dir = file_directory_path().'/'.$set['shared'];
  }
  else {//use personal folders by default.
    $dir = file_directory_path().'/'.$set['prefix'].$set['uid'];
  }
  if (file_check_directory($dir, TRUE)) {
    return $dir;
  }
  exit(t('Directory error!'));//without a working directory imce is useless. so, terminate.
}

/**
 * get role settings
 */
function imce_settings_role($rid) {
  $settings = variable_get('imce_settings_roles', array());
  return is_array($settings[$rid]) ? $settings[$rid] : imce_settings_default();
}

/**
 * get current user's settings
 */
function imce_settings_user() {
  global $user;
  if ($user->uid==1) {
    $set = imce_settings_user1();
  }
  else {
    $settings = variable_get('imce_settings_roles', array());
    foreach (imce_sorted_roles() as $rid=>$name) {
      if (isset($user->roles[$rid]) && is_array($settings[$rid])) {
        $set = $settings[$rid];
        break;
      }
    }
  }
  $set = $set ? $set : imce_settings_default();
  $set['uid'] = $user->uid;
  $set['dir'] = imce_get_directory($set);
  if ($_SESSION['imceuser']) {
    $settings = variable_get('imce_settings_roles', array());
    foreach (imce_sorted_roles() as $rid=>$name) {
      if (isset($_SESSION['imceuser']['roles'][$rid]) && is_array($settings[$rid])) {
        $userset = $settings[$rid] + array('uid'=>$_SESSION['imceuser']['uid']);
        if ($_SESSION['imceuser']['ownperm']) {
          $set = $userset;
        }
        $set['dir'] = imce_get_directory($userset);
        break;
      }
    }
  }
  return $set;
}

/**
 * get user #1 settings
 */
function imce_settings_user1() {
  return array_merge(imce_settings_default(), variable_get('imce_settings_user1', array()), array('resize'=>1, 'scale'=>1, 'delete'=>1, 'upload'=>1, 'nolimit'=>1));
}

/**
 * return default settings.
 */
function imce_settings_default() {
  return array('width' => 500, 'height' => 500, 'scale' => 0, 'twidth' => '', 'theight' => '', 'resize' => 0, 'filesize' => 100, 'quota' => 500, 'prefix' => 'u', 'shared' => '', 'extensions' => '', 'extras' => 0, 'delete' => 1, 'upload' => 1, 'nolimit' => 0);
}

/**
 * sort roles according to precedence settings. previously sorted roles are followed by latest added roles.
 */
function imce_sorted_roles() {
  static $order;
  if (isset($order)) {
    return $order;
  }
  $order = array();
  $roles = user_roles(0, 'access imce');
  foreach(variable_get('imce_settings_rank', array()) as $rid) {
    if (isset($roles[$rid])) {
      $order[$rid] = $roles[$rid];
      unset($roles[$rid]);
    }
  }
  krsort($roles);//sort the remaining unsorted roles by id, descending.
  $order += $roles;
  return $order;
}

/**
 * Return settings form for a role or user1.
 */
function imce_form_template($rid) {

  if ($rid=='user1') {
    $set = (object) imce_settings_user1();
    $form['width'] = array('#type' => 'textfield', '#size' => 4, '#default_value' => $set->width, '#prefix' => '<div class="form-item"><label>'. t('Dimensions for scaling') .':</label><div class="container-inline">'. t('Width') .' X '. t('Height') .': ', '#suffix' => ' X ',
    );
    $form['height'] = array('#type' => 'textfield', '#size' => 4, '#default_value' => $set->height, '#suffix' => 'px</div><div class="description">'. t('These dimensions will be used while scaling down newly uploaded big images.') .'</div></div>',
    );
    $form['twidth'] = array('#type' => 'textfield', '#size' => 4, '#default_value' => $set->twidth, '#prefix' => '<div class="form-item"><label>'.t('Thumbnail dimensions').':</label><div class="container-inline">'.t('Width').' X '.t('Height').': ', '#suffix' => ' X ',
    );
    $form['theight'] = array('#type' => 'textfield', '#size' => 4, '#default_value' => $set->theight, '#suffix' => 'px</div><div class="description">'.t('You can enable automatic thumbnail creation from newly uploaded images. To disable leave the fields blank.').'</div></div>',
    );
    $form['shared'] = array('#type' => 'textfield', '#title' => t('Your upload directory'), '#default_value' => $set->shared ? $set->shared : 'u1', '#description' => t('This directory must be relative to drupals file path. So if you want to use files/xyz, just enter xyz here.'),
    );
    $form['extras'] = array('#type' => 'checkbox', '#title' => '<strong>'.t('Enable extras').'</strong>', '#default_value' => $set->extras, '#description' => t('This javascript package includes browsing enhancements like file sorting, keyboard shortcuts, file filtering, etc.'),
    );
    return $form;
  }

  $set = (object) imce_settings_role($rid);
  $form['delete'] = array('#type' => 'checkbox',
    '#title' => t('delete files'),
    '#default_value' => $set->delete,
    '#prefix' => '<div class="form-item"><label>'.t('Permissions').':</label><div class="container-inline">',
    '#suffix' => ', ',
  );
  $form['upload'] = array('#type' => 'checkbox',
    '#title' => t('upload files'),
    '#default_value' => $set->upload,
    '#suffix' => ', ',
  );
  $form['nolimit'] = array('#type' => 'checkbox',
    '#title' => t('limitless upload'),
    '#default_value' => $set->nolimit,
    '#suffix' => '</div><div class="description">'.t('Enable/disable access for file upload and deletion in user directories. Limitless upload disables controlling filesize, image dimensions and quota.').'</div></div>',
  );
  $form['width'] = array('#type' => 'textfield',
    '#size' => 4,
    '#default_value' => $set->width,
    '#prefix' => '<div class="form-item"><label>'.t('Image dimensions').':</label><div class="container-inline">'.t('Width').' X '.t('Height').': ',
    '#suffix' => ' X ',
  );
  $form['height'] = array('#type' => 'textfield',
    '#size' => 4,
    '#default_value' => $set->height,
    '#suffix' => 'px</div><div class="description">'.t('Define the maximum dimensions for an image to be uploaded.').'</div></div>',
  );
  $form['scale'] = array('#type' => 'checkbox',
    '#title' => '<strong>'.t('Enable scaling of newly uploaded images.').'</strong>',
    '#default_value' => $set->scale,
    '#description' => t('If a newly uploaded image has dimensions exceeding the limit, it will be scaled down.'),
  );
  $form['twidth'] = array('#type' => 'textfield',
    '#size' => 4,
    '#default_value' => $set->twidth,
    '#prefix' => '<div class="form-item"><label>'.t('Thumbnail dimensions').':</label><div class="container-inline">'.t('Width').' X '.t('Height').': ',
    '#suffix' => ' X ',
  );
  $form['theight'] = array('#type' => 'textfield',
    '#size' => 4,
    '#default_value' => $set->theight,
    '#suffix' => 'px</div><div class="description">'.t('You can enable automatic thumbnail creation from newly uploaded images. To disable leave the fields blank.').'</div></div>',
  );
  $form['resize'] = array('#type' => 'checkbox',
    '#title' => '<strong>'.t('Enable custom resizing.').'</strong>',
    '#default_value' => $set->resize,
    '#description' => t('Users will be able to resize their images to any size up to allowed dimensions.'),
  );
  $form['filesize'] = array('#type' => 'textfield', 
    '#title' => t('File size'),
    '#default_value' => $set->filesize,
    '#description' => t('Define the maximum file size(KB) for an image to be uploaded.'),
  );
  $form['quota'] = array('#type' => 'textfield',
    '#title' => t('Upload quota'), 
    '#default_value' => $set->quota,
    '#description' => t('Define the total upload quota(KB) per user.'),
  );
  $form['prefix'] = array('#type' => 'textfield', 
    '#title' => t('Prefix for personal folder names'), 
    '#default_value' => $set->prefix,
    '#description' => t('Define the prefix that user IDs will be appended in order to create personal folders. Ex: entering "u" will result in folder names like u1, u14 etc. If you leave it blank, user IDs will be used as folder names.'),
  );
  $form['shared'] = array('#type' => 'textfield',
    '#title' => t('Use a shared folder'),
    '#default_value' => $set->shared,
    '#description' => t('If you want all your users to <strong>use a common folder instead of personal folders</strong>, here you can define that folder name (ex. images). Notice that shared upload means shared quota. If you are happy with personal folders leave this field blank.'),
  );
  $form['extensions'] = array('#type' => 'textfield',
    '#title' => t('Non-image file support'),
    '#default_value' => $set->extensions,
    '#description' => t('Although imce is mainly designed to browse images, it supports uploading and browsing of any file type. If you like to use this feature, define your <strong>allowed non-image file extensions</strong> here with a comma between them. Ex .doc, .pdf, .zip.  Note that, image upload limits also apply for these files. For a pure image browser leave this field blank.'),
  );
  $form['extras'] = array('#type' => 'checkbox',
    '#title' => '<strong>'.t('Enable extras').'</strong>',
    '#default_value' => $set->extras,
    '#description' => t('This javascript package includes browsing enhancements like file sorting, keyboard shortcuts, file filtering, etc.'),
  );
  return $form;
}

/**
 * return the form for admin/settings/imce
 */
function imce_form_admin_form() {
  $roles = imce_sorted_roles();
  $form['#tree'] = TRUE;

  $form['common'] = array('#type' => 'fieldset', '#collapsible' => TRUE, '#title' => t('Common settings'),);
  $form['common']['tinymce'] = array('#type' => 'checkbox',//tinyce support
    '#title' => '<strong>'.t('Enable tinyMCE support').'</strong>',
    '#default_value' => variable_get('imce_settings_tinymce', 1),
    '#description' => t('Make imce the default image/file browser for tinyMCE.'),
  );
  $form['common']['fck'] = array('#type' => 'checkbox',//fck support
    '#title' => '<strong>'.t('Enable FCKEditor support').'</strong>',
    '#default_value' => variable_get('imce_settings_fck', 0),
    '#description' => t('Replace the built-in file browser of FCKeditor with imce.'),
  );
  $form['common']['textarea'] = array('#type' => 'textfield',//plain textarea support
    '#title' => t('Enable inline image/file insertion into plain textareas'),
    '#default_value' => variable_get('imce_settings_textarea', ''),
    '#maxlength' => 255,
    '#description' => t('This feature allows you to add your images or files as <strong>html code into any plain textarea</strong>. This is useful especially when you dont use a wysiwyg editor such as tinyMCE or FCKeditor. Enter <strong>comma separated textarea IDs</strong> if you want to enable this feature. Otherwise, leave it blank. Hint: ID of Body fields in most node types is edit-body.'),
  );
  if (count($roles)>1) {//role precedence settings appear if there is more than 1 role.
    $rids = $rtext = array();
    foreach ($roles as $rid=>$name) {
      $rids[] = $rid;
      $rtext[] = '<strong>'.$rid.'-)</strong>'.$name;
    }
    $form['common']['rank'] = array('#type' => 'textfield',
      '#title' => t('Role precedence'),
      '#default_value' => implode('>', $rids),
      '#description' => t('A user having <strong>multiple roles</strong> gets the permissions of the highest one. Sort role IDs according to their <strong>precedence from higher to lower</strong> by putting > in between. Here is the id-name pairs of roles having access to imce:').'<div>'.implode(', ', $rtext).'</div>',
    );
  }

  if ($GLOBALS['user']->uid==1) {//user #1 settings.
    $form['user1'] = array('#type' => 'fieldset', '#collapsible' => TRUE, '#title' => t('Settings for user #1'),) + imce_form_template('user1');
  }

  foreach ($roles as $rid=>$name) {//role settings
    $form['roles'][$rid] = array('#type' => 'fieldset', '#collapsible' => TRUE, '#collapsed' => TRUE, '#title' => t('Settings for the role: !role', array('!role' => $name)),) + imce_form_template($rid);
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'),);
  return $form;
}

/**
 * return the form for admin/settings/imce
 */
function imce_form_admin() {
  return drupal_get_form('imce_form_admin_form');
}

/**
 * Save settings. (Forms API -> formID_submit)
 */
function imce_form_admin_form_submit($form_id, $edit) {
  if (isset($edit['common']['tinymce'])) {
    variable_set('imce_settings_tinymce', $edit['common']['tinymce']);
  }
  if (isset($edit['common']['fck'])) {
    variable_set('imce_settings_fck', $edit['common']['fck']);
  }
  if (isset($edit['common']['textarea'])) {
    variable_set('imce_settings_textarea', $edit['common']['textarea']);
  }
  if (isset($edit['common']['rank'])) {
    variable_set('imce_settings_rank', explode('>', str_replace(' ', '', $edit['common']['rank'])));
  }
  if (isset($edit['user1'])) {
    variable_set('imce_settings_user1', $edit['user1']);
  }
  if (isset($edit['roles'])) {
    variable_set('imce_settings_roles', $edit['roles']);
  }
  drupal_set_message(t('The changes have been saved.'));
}

/**
 * Implementation of hook_file_download(). support for private downloads.
 */
function imce_file_download($file) {
  $roles = variable_get('imce_settings_roles', array());
  $roles += array('user1' => variable_get('imce_settings_user1', array()));
  $roles += array('default' => imce_settings_default());
  $imcefile = FALSE;
  foreach ($roles as $rid=>$set) {
    if ($set['shared']) {
      if (strpos($file, $set['shared'].'/') === 0) {
        $imcefile = TRUE;
        break;
      }
    }
    else {
      if (preg_match("/^".str_replace(array('/', '-'), array('\/', '\-'), $set['prefix'])."[0-9]+\//", $file)) {
        $imcefile = TRUE;
        break;
      }
    }
  }
  if ($imcefile && ($path = file_create_path($file))) {
    $info = @getimagesize($path);
    $types = array(1 => 'image/gif', 2 => 'image/jpeg', 3 => 'image/png');
    if ($types[$info[2]]) {
      return array('Content-type: '. $types[$info[2]], 'Content-Disposition: attachment; filename="'. basename($file) .'"');
    }
    else {
      return array('Content-type: '. (function_exists('mime_content_type') ? mime_content_type($path) : 'application/x-download'), 'Content-Disposition: attachment; filename="'. basename($file) .'"');
    }
  }
}

/**
 * Implementation of hook_elements().
 */
function imce_elements() {
  $type = array();
  if (($ids=str_replace(' ', '', variable_get('imce_settings_textarea', ''))) && user_access('access imce')) {
    $type['textarea'] = array('#process' => array('imce_process_textarea' => array(explode(',', $ids))),);
  }
  return $type;
}

/**
 * Inline image/link insertion to textareas.
 */
function imce_process_textarea($element, $edit=NULL, $ids=array()) {
  if (in_array($element['#id'], $ids)) {
  drupal_add_js(drupal_get_path('module', 'imce').'/imce_set_inline.js');
  $element['#description'] .= '<div style="display:none"><a href="'.url('imce/browse').'" name="'.$element['#id'].'" class="imce-insert-inline">'.t('Insert image/file.').'</a></div>';
  }
  return $element;
}

/**
 * IMCE user/x page.
 */
function imce_user_page($acc) {
  if ($GLOBALS['user']->uid == $acc->uid) {//user
    $output = '<iframe id="imce-frame" height="500px" width="99%" name="imce-frame" src="'.url('imce/browse').'" scrolling="no"></iframe>';
  }
  else {//admin
    $output = '<p class="imce-login">'. t('Browse this user\'s files using !yours or !his', array('!yours' => l(t('your previlidges'), 'imce/login/'.$acc->uid, array('target' => 'imce-frame')), '!his' => l(t('his/her previlidges'), 'imce/login/'.$acc->uid.'/own', array('target' => 'imce-frame')))) .'</p><br /><iframe id="imce-frame" height="500px" width="99%" name="imce-frame" src="about:blank" scrolling="no"></iframe>';
  }
  drupal_set_title($acc->name);
  return $output;
}